services:
  # Europe DC (Primary)
  europe-node1:
    image: cassandra:latest
    container_name: europe-node1
    ports:
      - "9042:9042"
      - "7199:7199"
    environment:
      - CASSANDRA_CLUSTER_NAME=RetailCluster
      - CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch
      - CASSANDRA_DC=Europe_DC
      - CASSANDRA_RACK=RACK1
      - CASSANDRA_SEEDS=europe-node1
      - MAX_HEAP_SIZE=512M
      - HEAP_NEWSIZE=128M
      - JMX_PORT=7199
    healthcheck:
      test: ["CMD", "cqlsh", "-e", "describe keyspaces"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - ./europe-node-1/data:/var/lib/cassandra
      - ./europe-node-1/conf/cassandra-rackdc.properties:/etc/cassandra/cassandra-rackdc.properties
      # - ./europe-node-1/cassandra.yaml:/etc/cassandra/cassandra.yaml
      # - ./europe-node-1/cassandra.yaml:/etc/cassandra/cassandra.yaml:ro
    networks:
      - retail_network

  # Americas DC
  americas-node1:
    image: cassandra:latest
    container_name: americas-node1
    ports:
      - "9043:9042"
      - "7299:7199"  
    environment:
      - CASSANDRA_CLUSTER_NAME=RetailCluster
      - CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch
      - CASSANDRA_DC=Americas_DC
      - CASSANDRA_RACK=RACK1
      - CASSANDRA_SEEDS=europe-node1
      - MAX_HEAP_SIZE=512M
      - HEAP_NEWSIZE=128M
      - JMX_PORT=7199
    depends_on:
      - europe-node1
    volumes:
      - ./americas-node-1/data:/var/lib/cassandra
      - ./americas-node-1/conf/cassandra-rackdc.properties:/etc/cassandra/cassandra-rackdc.properties
      # - ./americas-node-1/cassandra.yaml:/etc/cassandra/cassandra.yaml
    networks:
      - retail_network

  # Asia-Pacific DC
  apac-node1:
    image: cassandra:latest
    container_name: apac-node1
    ports:
      - "9044:9042"
      - "7399:7199" 
    environment:
      - CASSANDRA_CLUSTER_NAME=RetailCluster
      - CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch
      - CASSANDRA_DC=AsiaPacific_DC
      - CASSANDRA_RACK=RACK1
      - CASSANDRA_SEEDS=europe-node1
      - MAX_HEAP_SIZE=512M
      - HEAP_NEWSIZE=128M
      - JMX_PORT=7199
    depends_on:
      - europe-node1
    volumes:
      - ./apac-node-1/data:/var/lib/cassandra
      # - ./apac-node-1/cassandra.yaml:/etc/cassandra/cassandra.yaml
      - ./apac-node-1/conf/cassandra-rackdc.properties:/etc/cassandra/cassandra-rackdc.properties
    networks:
      - retail_network

  # Kafka and Zookeeper
  zookeeper:
    image: arm64v8/zookeeper:latest 
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - retail_network

  kafka:
    image: confluentinc/cp-kafka:7.2.1.arm64 
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
    networks:
      - retail_network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: retail-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - retail_network

  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    networks:
      - retail_network
    restart: unless-stopped

  # Prometheus with updated configuration
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'

    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
      - ./prometheus/alerts.yml:/etc/prometheus/alerts.yml
    networks:
      - retail_network
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana with updated configuration
  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - grafana_data:/var/lib/grafana
    networks:
      - retail_network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Add metrics exporter as a service
  metrics-exporter:
    build:
      context: .
      dockerfile: Dockerfile.metrics
    container_name: metrics-exporter
    ports:
      - "9100:9100"
    environment:
      - PYTHONUNBUFFERED=1
    networks:
      - retail_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9100/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  retail_network:
    driver: bridge

volumes:
  prometheus_data:
  grafana_data: